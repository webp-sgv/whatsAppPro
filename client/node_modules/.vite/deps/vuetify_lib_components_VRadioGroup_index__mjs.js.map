{
  "version": 3,
  "sources": ["../../vuetify/src/components/VRadioGroup/VRadioGroup.tsx"],
  "sourcesContent": ["// Styles\nimport './VRadioGroup.sass'\n\n// Components\nimport { makeVInputProps, VInput } from '@/components/VInput/VInput'\nimport { VLabel } from '@/components/VLabel'\nimport { VSelectionControl } from '@/components/VSelectionControl'\nimport { makeSelectionControlGroupProps, VSelectionControlGroup } from '@/components/VSelectionControlGroup/VSelectionControlGroup'\n\n// Composables\nimport { IconValue } from '@/composables/icons'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed } from 'vue'\nimport { filterInputAttrs, genericComponent, getUid, omit, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { VInputSlots } from '@/components/VInput/VInput'\n\nexport type VRadioGroupSlots = Omit<VInputSlots, 'default'> & {\n  default: never\n  label: {\n    label: string | undefined\n    props: Record<string, any>\n  }\n}\n\nexport const makeVRadioGroupProps = propsFactory({\n  height: {\n    type: [Number, String],\n    default: 'auto',\n  },\n\n  ...makeVInputProps(),\n  ...omit(makeSelectionControlGroupProps(), ['multiple']),\n\n  trueIcon: {\n    type: IconValue,\n    default: '$radioOn',\n  },\n  falseIcon: {\n    type: IconValue,\n    default: '$radioOff',\n  },\n  type: {\n    type: String,\n    default: 'radio',\n  },\n}, 'VRadioGroup')\n\nexport const VRadioGroup = genericComponent<VRadioGroupSlots>()({\n  name: 'VRadioGroup',\n\n  inheritAttrs: false,\n\n  props: makeVRadioGroupProps(),\n\n  emits: {\n    'update:modelValue': (val: any) => true,\n  },\n\n  setup (props, { attrs, slots }) {\n    const uid = getUid()\n    const id = computed(() => props.id || `radio-group-${uid}`)\n    const model = useProxiedModel(props, 'modelValue')\n\n    useRender(() => {\n      const [rootAttrs, controlAttrs] = filterInputAttrs(attrs)\n      const [inputProps, _1] = VInput.filterProps(props)\n      const [controlProps, _2] = VSelectionControl.filterProps(props)\n      const label = slots.label\n        ? slots.label({\n          label: props.label,\n          props: { for: id.value },\n        })\n        : props.label\n\n      return (\n        <VInput\n          class={[\n            'v-radio-group',\n            props.class,\n          ]}\n          style={ props.style }\n          { ...rootAttrs }\n          { ...inputProps }\n          v-model={ model.value }\n          id={ id.value }\n        >\n          {{\n            ...slots,\n            default: ({\n              id,\n              messagesId,\n              isDisabled,\n              isReadonly,\n            }) => (\n              <>\n                { label && (\n                  <VLabel id={ id.value }>\n                    { label }\n                  </VLabel>\n                )}\n\n                <VSelectionControlGroup\n                  { ...controlProps }\n                  id={ id.value }\n                  aria-describedby={ messagesId.value }\n                  defaultsTarget=\"VRadio\"\n                  trueIcon={ props.trueIcon }\n                  falseIcon={ props.falseIcon }\n                  type={ props.type }\n                  disabled={ isDisabled.value }\n                  readonly={ isReadonly.value }\n                  aria-labelledby={ label ? id.value : undefined }\n                  multiple={ false }\n                  { ...controlAttrs }\n                  v-model={ model.value }\n                  v-slots={ slots }\n                />\n              </>\n            ),\n          }}\n        </VInput>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VRadioGroup = InstanceType<typeof VRadioGroup>\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAA;AA2BO,IAAMA,uBAAuBC,aAAa;EAC/CC,QAAQ;IACNC,MAAM,CAACC,QAAQC,MAAM;IACrBC,SAAS;EACX;EAEA,GAAGC,gBAAe;EAClB,GAAGC,KAAKC,+BAA8B,GAAI,CAAC,UAAU,CAAC;EAEtDC,UAAU;IACRP,MAAMQ;IACNL,SAAS;EACX;EACAM,WAAW;IACTT,MAAMQ;IACNL,SAAS;EACX;EACAH,MAAM;IACJA,MAAME;IACNC,SAAS;EACX;AACF,GAAG,aAAa;AAET,IAAMO,cAAcC,iBAAgB,EAAqB;EAC9DC,MAAM;EAENC,cAAc;EAEdC,OAAOjB,qBAAoB;EAE3BkB,OAAO;IACL,qBAAsBC,SAAa;EACrC;EAEAC,MAAOH,OAAKI,MAAoB;AAAA,QAAlB;MAAEC;MAAOC;IAAM,IAACF;AAC5B,UAAMG,MAAMC,OAAM;AAClB,UAAMC,KAAKC,SAAS,MAAMV,MAAMS,MAAO,eAAcF,GAAI,EAAC;AAC1D,UAAMI,QAAQC,gBAAgBZ,OAAO,YAAY;AAEjDa,cAAU,MAAM;AACd,YAAM,CAACC,WAAWC,YAAY,IAAIC,iBAAiBX,KAAK;AACxD,YAAM,CAACY,YAAYC,EAAE,IAAIC,OAAOC,YAAYpB,KAAK;AACjD,YAAM,CAACqB,cAAcC,EAAE,IAAIC,kBAAkBH,YAAYpB,KAAK;AAC9D,YAAMwB,QAAQlB,MAAMkB,QAChBlB,MAAMkB,MAAM;QACZA,OAAOxB,MAAMwB;QACbxB,OAAO;UAAEyB,KAAKhB,GAAGiB;QAAM;MACzB,CAAC,IACC1B,MAAMwB;AAEV,aAAAG,YAAAR,QAAAS,WAAA;QAAA,SAEW,CACL,iBACA5B,MAAM6B,KAAK;QACZ,SACO7B,MAAM8B;MAAK,GACdhB,WACAG,YAAU;QAAA,cACLN,MAAMe;QAAK,uBAAAK,YAAXpB,MAAMe,QAAKK;QAAA,MAChBtB,GAAGiB;MAAK,CAAA,GAAA;QAGX,GAAGpB;QACHjB,SAAS2C,WAAA;AAAA,cAAC;YACRvB,IAAAA;YACAwB;YACAC;YACAC;UACF,IAACH;AAAA,iBAAAL,YAAAS,UAAA,MAAA,CAEKZ,SAAKG,YAAAU,QAAA;YAAA,MACQ5B,IAAGiB;UAAK,GAAA;YAAArC,SAAAA,MAAA,CACjBmC,KAAK;UAAA,CAAA,GAEVG,YAAAW,wBAAAV,WAGMP,cAAY;YAAA,MACZZ,IAAGiB;YAAK,oBACMO,WAAWP;YAAK,kBACpB;YAAQ,YACZ1B,MAAMP;YAAQ,aACbO,MAAML;YAAS,QACpBK,MAAMd;YAAI,YACNgD,WAAWR;YAAK,YAChBS,WAAWT;YAAK,mBACTF,QAAQf,IAAGiB,QAAQa;YAAS,YACnC;UAAK,GACXxB,cAAY;YAAA,cACPJ,MAAMe;YAAK,uBAAAK,YAAXpB,MAAMe,QAAKK;UAAA,CAAA,GACXzB,KAAK,CAAA,CAAA;QAAA;MAGpB,CAAA;IAIT,CAAC;AAED,WAAO,CAAC;EACV;AACF,CAAC;",
  "names": ["makeVRadioGroupProps", "propsFactory", "height", "type", "Number", "String", "default", "makeVInputProps", "omit", "makeSelectionControlGroupProps", "trueIcon", "IconValue", "falseIcon", "VRadioGroup", "genericComponent", "name", "inheritAttrs", "props", "emits", "val", "setup", "_ref", "attrs", "slots", "uid", "getUid", "id", "computed", "model", "useProxiedModel", "useRender", "rootAttrs", "controlAttrs", "filterInputAttrs", "inputProps", "_1", "VInput", "filterProps", "controlProps", "_2", "VSelectionControl", "label", "for", "value", "_createVNode", "_mergeProps", "class", "style", "$event", "_ref2", "messagesId", "isDisabled", "isReadonly", "_Fragment", "VLabel", "VSelectionControlGroup", "undefined"]
}
